import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import { getSession } from "next-auth/react";
import {
  FetchSettingsResponse,
  UpdateSettingsRequest,
  UpdateTermsConditionRequest,
} from "@/types/services/generalSettings";

const getRequest = (url: string) => ({
  url,
  method: "GET",
});

const postRequest = (url: string, details?: unknown) => ({
  url,
  method: "POST",
  body: details,
});

export const generalSettings = createApi({
  reducerPath: "generalSettings",
  baseQuery: fetchBaseQuery({
    baseUrl: process.env.NEXT_PUBLIC_APP_BASE_URL,
    prepareHeaders: async (headers) => {
      const session = await getSession();
      const token = session?.user?.token;

      if (token) {
        headers.set("authorization", `Bearer ${token}`);
      }
      return headers;
    },
  }),
  tagTypes: ["GeneralSettings"],
  endpoints: (builder) => ({
    // Upload Logo Mutation
    uploadLogo: builder.mutation<void, FormData>({
      query: (data) => postRequest("/upload-logo", data),
      invalidatesTags: ["GeneralSettings"],
    }),

    // Update Settings Mutation
    updateSettings: builder.mutation<void, UpdateSettingsRequest>({
      query: (data) => postRequest("/update-settings", data),
      invalidatesTags: ["GeneralSettings"],
    }),

    // Fetch Settings Query
    fetchSettings: builder.query<FetchSettingsResponse, void>({
      query: () => getRequest("/fetch-settings"),
      providesTags: ["GeneralSettings"],
    }),

    // Update Terms and Conditions Mutation
    updateTermsCondition: builder.mutation<void, UpdateTermsConditionRequest>({
      query: (data) => postRequest("/update-terms-condition", data),
      invalidatesTags: ["GeneralSettings"],
    }),
  }),
});

// Export hooks generated by RTK Query for each endpoint
export const {
  useUploadLogoMutation,
  useUpdateSettingsMutation,
  useFetchSettingsQuery,
  useUpdateTermsConditionMutation,
} = generalSettings;
