import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import { getSession } from "next-auth/react";
import {
  FetchNotificationsResponse,
  UpdateNotificationRequest,
  FetchNotificationTypesResponse,
} from "@/types/services/notifications";

const getRequest = (url: string) => ({
  url,
  method: "GET",
});

const postRequest = (url: string, details?: unknown) => ({
  url,
  method: "POST",
  body: details,
});

export const notificationsApi = createApi({
  reducerPath: "notificationsApi",
  baseQuery: fetchBaseQuery({
    baseUrl: process.env.NEXT_PUBLIC_APP_BASE_URL,
    prepareHeaders: async (headers) => {
      const session = await getSession();
      const token = session?.user?.token;

      if (token) {
        headers.set("authorization", `Bearer ${token}`);
      }
      return headers;
    },
  }),
  tagTypes: ["Notifications"],
  endpoints: (builder) => ({
    // Fetch Notifications Query
    fetchNotifications: builder.query<FetchNotificationsResponse[], void>({
      query: () => getRequest("/fetch-notification"),
      providesTags: ["Notifications"],
    }),

    // Update Notification Mutation
    updateNotification: builder.mutation<void, UpdateNotificationRequest>({
      query: (data) => postRequest("/update-notification", data),
      invalidatesTags: ["Notifications"],
    }),

    // Fetch Notification Types Query
    fetchNotificationTypes: builder.query<FetchNotificationTypesResponse[], void>({
      query: () => getRequest("/fetch-notification-types"),
      providesTags: ["Notifications"],
    }),
  }),
});

// Export hooks generated by RTK Query for each endpoint
export const {
  useFetchNotificationsQuery,
  useUpdateNotificationMutation,
  useFetchNotificationTypesQuery,
} = notificationsApi;
